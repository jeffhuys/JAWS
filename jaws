#!/usr/bin/env node
const program = require('commander-plus')
const chalk = require ('chalk')
const prettyjson = require ('prettyjson')
const package = require ('./package.json')

const _find = require ('lodash.find')
const _forEach = require ('lodash.foreach')

const AWS = require('aws-sdk')

AWS.config.update({ region: 'eu-west-1' })

let ecs = new AWS.ECS()

program
  .version (package.version)
  // .option  ('-')

program
  .command('*')
  .action(function (env) {
    errorLog(`Unknown command: ${env}`)
  })

program
  .command('env')
  .option('-T, --taskdef [taskdef]')
  .option('-v, --variable [variable]')
  .option('-s, --set [value]')
  .option('-p, --pretty', `Enable pretty rendering of JSON objects`)
  .description('Environment actions')
  .action(function(env) { envCommand(env) })

program.parse (process.argv)



async function envCommand (env) {

  if (!env.taskdef) return errorLog('No task definition supplied.')

  const taskDefinition = (await describeTaskDefinition( { taskDefinition: env.taskdef } )).taskDefinition

  if (!env.variable)

    // No particular variable given
    printObj ( taskDefinition.containerDefinitions[0].environment, env.pretty )

  else {

    // Variable actions
    // TODO: SET
    const envVar = _find (taskDefinition.containerDefinitions[0].environment, {name: env.variable})

    if (envVar)

      printObj ( { [env.variable]: envVar.value }, env.pretty )

    else

      errorLog ( `Variable not found: ${ env.variable }` )

  }

}




function describeTaskDefinition( args ) {
  return new Promise( function(resolve, reject) {
    ecs.describeTaskDefinition ( args, function (err, data) {
      return err ? reject (err) : resolve (data)
    })
  })
}

function isEmptyObject (obj) {
  return !Object.keys(obj).length;
}

function printObj (obj, pretty) {
  if (pretty) console.log (prettyjson.render (obj))
  else        console.log (JSON.stringify (obj))
}

function errorLog (err) {
  if (err.code) console.log (chalk.red.bold('ERROR:'), err.code)
  if (err.message) console.log (err.message)
  else console.log (chalk.red.bold (err))
}

function debugLog() {
  /*if (!args.quiet) */console.log.apply(console.log, arguments)
}