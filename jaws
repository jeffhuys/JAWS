#!/usr/bin/env node
const program = require('commander-plus')
const chalk = require ('chalk')
const prettyjson = require ('prettyjson')
const package = require ('./package.json')

const _find = require ('lodash.find')
const _forEach = require ('lodash.foreach')

const AWS = require('aws-sdk')

AWS.config.update({ region: 'eu-west-1' })

let ecs = new AWS.ECS()

const silent = '-S, --silent'
const silentDesc = 'Suppress any non-JSON output'

program
  .version (package.version)
  .usage   ('<command> [options]')
  .option  (silent, silentDesc)

program
  .command('*')
  .action(function (env) {
    errorLog(`Unknown command: ${env}`)
  })

program
  .command('env')
    .description('Environment actions')
    .option('-T, --taskdef [taskdef] <required>')
    .option('-v, --variable [variable]')
    .option('-s, --set [value]')
    .option('-p, --pretty', `Enable pretty rendering of JSON objects (not for use with pipe!)`)
    .option('-y, --yes', `Don't confirm before updating AWS. Be careful!`)
    .option(silent, silentDesc)
    .action(function(env) { envCommand(env) })

// Extend help
program
  .on ('--help', () => {
    console.log('  Examples:')
    console.log('')
    console.log(chalk.bold('    Show latest environment, pretty-printed'))
    console.log('    $ jaws env -pT www-bleeve-nl')
    console.log('')
    console.log(chalk.bold('    Show latest specified environment variable'))
    console.log('    $ jaws env -T www-bleeve-nl -v BLEEVE_APIBASEURL')
    console.log('')
  })

program
  .parse (process.argv)

// If no args given, display help and exit
if (process.argv.length === 2) program.help()


async function envCommand (env) {

  if (!env.taskdef) errorLog('No task definition supplied.', true)

  const taskDefinition = (await describeTaskDefinition( { taskDefinition: env.taskdef } )).taskDefinition
  const taskDefEnvVars = taskDefinition.containerDefinitions[0].environment

  if (!env.variable)

    // No particular variable given
    printObj ( taskDefEnvVars, env.pretty )

  else {

    // Variable actions
    // TODO: SET

    // GET enviroment and display
    let envVar = _find (taskDefEnvVars, {name: env.variable})

    if (envVar) {
      // GET variable
      if(!env.set) {

        printObj ( { [env.variable]: envVar.value }, env.pretty )

      // GET var, change, confirm? and push
      } else {

        // Change the variable using the reference returned by _find
        envVar.value = env.set

        // Confirm please
        if(!env.yes) {

          // Show the user the new environment variables
          printObj(taskDefEnvVars, env.pretty)

          console.log(chalk.bold(`${chalk.red('\nWarning:')} will update ${env.taskdef} env vars to the above!`))

          // Use .choose because of a bug with .confirm
          program.choose(['Change environment variables', 'Leave everything intact'], i => {
            if (i > 0) errorLog('Operation aborted by user', true)
            else updateEnvironment( env.taskdef, taskDefEnvVars )
          })

        // We'll do it live!
        } else {

        }

      }

    // Variable not found
    } else {

      errorLog ( `Variable not found: ${ env.variable }` )

    }

  }

}




function describeTaskDefinition( args ) {
  return new Promise( function(resolve, reject) {
    ecs.describeTaskDefinition ( args, function (err, data) {
      return err ? reject (err) : resolve (data)
    })
  })
}

function isEmptyObject (obj) {
  return !Object.keys(obj).length;
}

function printObj (obj, pretty) {
  if (pretty) console.log (prettyjson.render (obj))
  else        console.log (JSON.stringify (obj))
}

function errorLog (err, exit) {
  if (err.code) console.log (chalk.red.bold('ERROR:'), err.code)
  if (err.message) console.log (err.message)
  else console.log (chalk.red.bold (err))
  
  if (exit) process.exit(-1)
}

function debugLog() {
  /*if (!args.quiet) */console.log.apply(console.log, arguments)
}